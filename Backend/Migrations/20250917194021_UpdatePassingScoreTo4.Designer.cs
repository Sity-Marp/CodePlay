// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917194021_UpdatePassingScoreTo4")]
    partial class UpdatePassingScoreTo4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "HyperText Markup Language"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "High Tech Modern Language"
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Home Tool Markup Language"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Hyperlink and Text Markup Language"
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "<h1> till <h6>"
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "<header>"
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "<title>"
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "<heading>"
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = true,
                            QuestionId = 3,
                            Text = "<a href=\"url\">Länktext</a>"
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "<link url=\"url\">Länktext</link>"
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "<a url=\"url\">Länktext</a>"
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "<href=\"url\">Länktext</href>"
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = true,
                            QuestionId = 4,
                            Text = "<ul>"
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "<ol>"
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "<li>"
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "<list>"
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = true,
                            QuestionId = 5,
                            Text = "För att tala om för webbläsaren vilken version av HTML som används"
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "För att länka till externa CSS-filer"
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "För att definiera dokumentets titel"
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "För att importera JavaScript-filer"
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = true,
                            QuestionId = 6,
                            Text = "Cascading Style Sheets"
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "Computer Style Sheets"
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "Creative Style Sheets"
                        },
                        new
                        {
                            Id = 24,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "Colorful Style Sheets"
                        },
                        new
                        {
                            Id = 25,
                            IsCorrect = true,
                            QuestionId = 7,
                            Text = "Inline, internal eller external"
                        },
                        new
                        {
                            Id = 26,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Endast genom externa filer"
                        },
                        new
                        {
                            Id = 27,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Endast genom style-attributet"
                        },
                        new
                        {
                            Id = 28,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Endast genom <style>-taggen"
                        },
                        new
                        {
                            Id = 29,
                            IsCorrect = true,
                            QuestionId = 8,
                            Text = "color"
                        },
                        new
                        {
                            Id = 30,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "text-color"
                        },
                        new
                        {
                            Id = 31,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "font-color"
                        },
                        new
                        {
                            Id = 32,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "background-color"
                        },
                        new
                        {
                            Id = 33,
                            IsCorrect = true,
                            QuestionId = 9,
                            Text = "Margin är utrymmet utanför elementet, padding är utrymmet inuti"
                        },
                        new
                        {
                            Id = 34,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Padding är utrymmet utanför elementet, margin är utrymmet inuti"
                        },
                        new
                        {
                            Id = 35,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "De är samma sak"
                        },
                        new
                        {
                            Id = 36,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Margin används för text, padding för bilder"
                        },
                        new
                        {
                            Id = 37,
                            IsCorrect = true,
                            QuestionId = 10,
                            Text = "ID-selektor (#id)"
                        },
                        new
                        {
                            Id = 38,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Klass-selektor (.class)"
                        },
                        new
                        {
                            Id = 39,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Element-selektor (div)"
                        },
                        new
                        {
                            Id = 40,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Universal-selektor (*)"
                        },
                        new
                        {
                            Id = 41,
                            IsCorrect = true,
                            QuestionId = 11,
                            Text = "För att deklarera variabler"
                        },
                        new
                        {
                            Id = 42,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "För att skapa funktioner"
                        },
                        new
                        {
                            Id = 43,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "För att importera moduler"
                        },
                        new
                        {
                            Id = 44,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "För att skapa loopar"
                        },
                        new
                        {
                            Id = 45,
                            IsCorrect = true,
                            QuestionId = 12,
                            Text = "console.log()"
                        },
                        new
                        {
                            Id = 46,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "print()"
                        },
                        new
                        {
                            Id = 47,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "document.write()"
                        },
                        new
                        {
                            Id = 48,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "alert()"
                        },
                        new
                        {
                            Id = 49,
                            IsCorrect = true,
                            QuestionId = 13,
                            Text = "'==' jämför värde, '===' jämför värde och typ"
                        },
                        new
                        {
                            Id = 50,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "'===' jämför värde, '==' jämför värde och typ"
                        },
                        new
                        {
                            Id = 51,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "De är identiska"
                        },
                        new
                        {
                            Id = 52,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "'==' används för siffror, '===' för text"
                        },
                        new
                        {
                            Id = 53,
                            IsCorrect = true,
                            QuestionId = 14,
                            Text = "function namn() {} eller const namn = () => {}"
                        },
                        new
                        {
                            Id = 54,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "def namn():"
                        },
                        new
                        {
                            Id = 55,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "create function namn()"
                        },
                        new
                        {
                            Id = 56,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "new function namn()"
                        },
                        new
                        {
                            Id = 57,
                            IsCorrect = true,
                            QuestionId = 15,
                            Text = "'let' kan ändras, 'const' är konstant"
                        },
                        new
                        {
                            Id = 58,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "'const' kan ändras, 'let' är konstant"
                        },
                        new
                        {
                            Id = 59,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "De är identiska"
                        },
                        new
                        {
                            Id = 60,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "'let' används för siffror, 'const' för text"
                        },
                        new
                        {
                            Id = 61,
                            IsCorrect = true,
                            QuestionId = 16,
                            Text = "button { background-color: blue; }"
                        },
                        new
                        {
                            Id = 62,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "#button { background-color: blue; }"
                        },
                        new
                        {
                            Id = 63,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = ".button { background-color: blue; }"
                        },
                        new
                        {
                            Id = 64,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "<button style=\"background-color: blue;\">"
                        },
                        new
                        {
                            Id = 65,
                            IsCorrect = true,
                            QuestionId = 17,
                            Text = "Med CSS variabler och media queries eller JavaScript"
                        },
                        new
                        {
                            Id = 66,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Endast med HTML-attribut"
                        },
                        new
                        {
                            Id = 67,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Webbläsaren hanterar det automatiskt"
                        },
                        new
                        {
                            Id = 68,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Det går inte att implementera"
                        },
                        new
                        {
                            Id = 69,
                            IsCorrect = true,
                            QuestionId = 18,
                            Text = "JavaScript"
                        },
                        new
                        {
                            Id = 70,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "HTML"
                        },
                        new
                        {
                            Id = 71,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "CSS"
                        },
                        new
                        {
                            Id = 72,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "PHP"
                        },
                        new
                        {
                            Id = 73,
                            IsCorrect = true,
                            QuestionId = 19,
                            Text = "CSS"
                        },
                        new
                        {
                            Id = 74,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "JavaScript"
                        },
                        new
                        {
                            Id = 75,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "HTML"
                        },
                        new
                        {
                            Id = 76,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "PHP"
                        },
                        new
                        {
                            Id = 77,
                            IsCorrect = true,
                            QuestionId = 20,
                            Text = ".btn { background-color: green; }"
                        },
                        new
                        {
                            Id = 78,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "#btn { background-color: green; }"
                        },
                        new
                        {
                            Id = 79,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "btn { background-color: green; }"
                        },
                        new
                        {
                            Id = 80,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "button.btn { color: green; }"
                        });
                });

            modelBuilder.Entity("Backend.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId", "Order")
                        .IsUnique();

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = 1,
                            QuizId = 1,
                            Text = "Vad står HTML för?"
                        },
                        new
                        {
                            Id = 2,
                            Order = 2,
                            QuizId = 1,
                            Text = "Vilken tagg används för att skapa en rubrik?"
                        },
                        new
                        {
                            Id = 3,
                            Order = 3,
                            QuizId = 1,
                            Text = "Vad är den korrekta syntaxen för att skapa en länk i HTML?"
                        },
                        new
                        {
                            Id = 4,
                            Order = 4,
                            QuizId = 1,
                            Text = "Vilken tagg används för att skapa en oordnad lista?"
                        },
                        new
                        {
                            Id = 5,
                            Order = 5,
                            QuizId = 1,
                            Text = "Vad är DOCTYPE-deklarationen till för?"
                        },
                        new
                        {
                            Id = 6,
                            Order = 1,
                            QuizId = 2,
                            Text = "Vad står CSS för?"
                        },
                        new
                        {
                            Id = 7,
                            Order = 2,
                            QuizId = 2,
                            Text = "Hur lägger man till CSS i ett HTML-dokument?"
                        },
                        new
                        {
                            Id = 8,
                            Order = 3,
                            QuizId = 2,
                            Text = "Vilken CSS-egenskap används för att ändra textfärg?"
                        },
                        new
                        {
                            Id = 9,
                            Order = 4,
                            QuizId = 2,
                            Text = "Vad är skillnaden mellan margin och padding?"
                        },
                        new
                        {
                            Id = 10,
                            Order = 5,
                            QuizId = 2,
                            Text = "Vilken CSS-selektor har högst specificitet?"
                        },
                        new
                        {
                            Id = 11,
                            Order = 1,
                            QuizId = 3,
                            Text = "Vad används 'var', 'let' och 'const' för i JavaScript?"
                        },
                        new
                        {
                            Id = 12,
                            Order = 2,
                            QuizId = 3,
                            Text = "Vilken metod används för att skriva ut text i konsolen?"
                        },
                        new
                        {
                            Id = 13,
                            Order = 3,
                            QuizId = 3,
                            Text = "Vad är skillnaden mellan '==' och '===' i JavaScript?"
                        },
                        new
                        {
                            Id = 14,
                            Order = 4,
                            QuizId = 3,
                            Text = "Hur skapar man en funktion i JavaScript?"
                        },
                        new
                        {
                            Id = 15,
                            Order = 5,
                            QuizId = 3,
                            Text = "Vad är skillnaden på 'let' och 'const'?"
                        },
                        new
                        {
                            Id = 16,
                            Order = 1,
                            QuizId = 4,
                            Text = "Du har flera knappar <button> på sidan och vill att alla ska ha blå bakgrund. Hur selektera du dem i CSS?"
                        },
                        new
                        {
                            Id = 17,
                            Order = 2,
                            QuizId = 4,
                            Text = "Hur implementerar man dark mode på en webbsida?"
                        },
                        new
                        {
                            Id = 18,
                            Order = 3,
                            QuizId = 4,
                            Text = "När du klickar på en knapp byter den färg. Vilket språk hanterar detta?"
                        },
                        new
                        {
                            Id = 19,
                            Order = 4,
                            QuizId = 4,
                            Text = "En knapp ska ändra bakgrundsfärg när man för muspekaren över den. Vilket språk skapar denna hover-effekt?"
                        },
                        new
                        {
                            Id = 20,
                            Order = 5,
                            QuizId = 4,
                            Text = "Du har flera knappar med klassen btn. Du vill göra alla knappar gröna. Vilken CSS-selektor används?"
                        });
                });

            modelBuilder.Entity("Backend.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Track")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Track", "LevelNumber")
                        .IsUnique();

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LevelNumber = 1,
                            PassingScore = 4,
                            Title = "HTML Grundläggande",
                            Track = 1
                        },
                        new
                        {
                            Id = 2,
                            LevelNumber = 2,
                            PassingScore = 4,
                            Title = "CSS Grundläggande",
                            Track = 2
                        },
                        new
                        {
                            Id = 3,
                            LevelNumber = 3,
                            PassingScore = 4,
                            Title = "JavaScript Grundläggande",
                            Track = 3
                        },
                        new
                        {
                            Id = 4,
                            LevelNumber = 4,
                            PassingScore = 4,
                            Title = "Kombinerad Grundläggande",
                            Track = 4
                        });
                });

            modelBuilder.Entity("Backend.Models.QuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectCount")
                        .HasColumnType("int");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PlayedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<int>("Track")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WrongCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId", "PlayedAt");

                    b.HasIndex("Track", "LevelNumber", "PlayedAt");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Email = "testuser@example.com",
                            PasswordHash = "n3NeDfmh3ccCvwoae4MDP59xU6AMKd6CztrcmVcomwU=",
                            Username = "testuser"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AnsweredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizAttemptId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedOption")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizAttemptId");

                    b.HasIndex("UserId", "QuestionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("Backend.Models.UserProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("int");

                    b.Property<int>("HighestUnlockedLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("TotalCorrect")
                        .HasColumnType("int");

                    b.Property<int>("TotalIncorrect")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("Track")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Track")
                        .IsUnique();

                    b.ToTable("UserProgresses");
                });

            modelBuilder.Entity("Backend.Models.AnswerOption", b =>
                {
                    b.HasOne("Backend.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Backend.Models.Question", b =>
                {
                    b.HasOne("Backend.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Backend.Models.QuizAttempt", b =>
                {
                    b.HasOne("Backend.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.UserAnswer", b =>
                {
                    b.HasOne("Backend.Models.QuizAttempt", "QuizAttempt")
                        .WithMany("Answers")
                        .HasForeignKey("QuizAttemptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizAttempt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.UserProgress", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("Backend.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Backend.Models.QuizAttempt", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
